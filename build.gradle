/**
 * Copyright 2021 Esri
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy 
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations 
 * under the License.
 */

plugins {
    id 'application'
    id 'org.beryx.jlink' version '2.24.1'
    id 'org.openjfx.javafxplugin' version "0.0.13"
}

compileJava.options.encoding = 'UTF-8'

// these tasks are automatically run when you call ./gradlew
defaultTasks "clean", "copyNatives", "jpackage", "cleanSDK"

ext {
    arcgisVersion = '200.0.0'
    platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}

repositories {
    mavenCentral()
    maven {
        url 'https://esri.jfrog.io/artifactory/arcgis'
    }
    maven {
        url 'https://olympus.esri.com/artifactory/arcgisruntime-repo'
    }
}

configurations {
    natives
}

dependencies {
    implementation "com.esri.arcgisruntime:arcgis-java:$arcgisVersion"
    natives "com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion"
    natives "com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion"
}

javafx {
    version = "17.0.2"
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.web', 'javafx.media' ]
}

application {
    mainModule = "com.esri.samples.graphics_update"
    mainClass = "com.esri.samples.graphics_update.client_app.MoveGraphicsSample"
    applicationName = "Move Graphics App"
}

task copyNatives(type: Copy) {
    description = "Copies the arcgis native libraries into the .arcgis directory for development."
    group = "build"
    configurations.natives.asFileTree.each {
        from(zipTree(it))
    }
    into "${System.properties.getProperty("user.home")}/.arcgis/$arcgisVersion"
}

task cleanSDK(type: Delete) {
    description 'clean ArcGIS SDK install'
    delete "${System.properties.getProperty("user.home")}/.arcgis/${arcgisVersion}"
}

run {
    dependsOn copyNatives
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--bind-services']
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def iconType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "icon.$iconType"]
        installerOptions = ['--vendor', 'ESRI Inc']
        jvmArgs = ['-Dapp.dir=$APPDIR']

        switch (platform) {
            case "win":
                imageName = "$applicationName"
                installerType = 'msi'
                installerName = "Display a Map"
                appVersion = version.split("-")[0] // default msi version rules only allow [0-255].[0-255].[0-65535]
                installerOptions += ['--win-per-user-install', '--win-menu', '--win-shortcut', '--win-dir-chooser']
                break
            case "mac":
                // dmg seems to have signing issues, pkg seems to work
                installerName = "Display a Map"
                imageName = "$applicationName"
                appVersion = version.split("-")[0] // default mac application image version rules only allow [0-255].[0-255].[0-65535]
                imageOptions += ['--mac-package-name', 'MoveGraphicsApp', '--mac-package-identifier', 'MoveGraphicsApp']
                break
            case "linux":
                installerType = 'deb'
                imageName = "$applicationName"
                installerName = "move-graphics-app"
                installerOptions += ['--linux-shortcut']
                break
        }
    }
}

tasks.jpackageImage.doLast {
    def jpackageDirectory = "${buildDir}/jpackage"
        switch (platform) {
            case "mac":
                def appDirectory = "${jpackageDirectory}/${applicationName}.app/Contents/app"
                copy {
                    from(copyNatives) {
                        include "jniLibs/MACOS/**"
                        include "resources/**"
                    }
                    into "${appDirectory}/libs"
                }
                copy {
                    from("data")
                    into "${appDirectory}/data"
                }
                copy {
                    from("resources")
                    into "${appDirectory}/resources"
                }
                break
            case "win":
                def appDirectory = "${jpackageDirectory}/${applicationName}/app"
                copy {
                    from(copyNatives) {
                        include "jniLibs/WIN64/**", "jniLibs/directx/**"
                        include "resources/**"
                    }
                    into "${appDirectory}/libs"
                }
                copy {
                    from("data")
                    into "${appDirectory}/data"
                }
                copy {
                    from("resources")
                    into "${appDirectory}/resources"
                }
                break
            case "linux":
                def appDirectory = "${jpackageDirectory}/${applicationName}/lib/app"
                copy {
                    from(copyNatives) {
                        include "jniLibs/LX64/**"
                        include "resources/**"
                    }
                    into "${appDirectory}/libs"
                }
                copy {
                    from("data")
                    into "${appDirectory}/data"
                }
                copy {
                    from("resources")
                    into "${appDirectory}/resources"
                }
                break
        }
}
